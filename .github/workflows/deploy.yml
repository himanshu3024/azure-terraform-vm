name: Deploy Azure VM

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init
        working-directory: .//

      - name: Terraform Plan
        run: |
          terraform plan -input=false \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="client_id=${{ secrets.ARM_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
            -var="location=${{ secrets.LOCATION || 'East US' }}" \
            -var="project_name=${{ secrets.PROJECT_NAME || 'azure-vm-project-v2' }}" \
            -var="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME || 'myResourceGroup' }}" \
            -var="vm_size=${{ secrets.VM_SIZE || 'Standard_B1s' }}" \
            -var="admin_username=${{ secrets.ADMIN_USERNAME || 'azureuser' }}" \
            -var="admin_ssh_public_key=${{ secrets.ADMIN_SSH_PUBLIC_KEY }}"
        working-directory: .//

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve -input=false \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="client_id=${{ secrets.ARM_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
            -var="location=${{ secrets.LOCATION || 'East US' }}" \
            -var="project_name=${{ secrets.PROJECT_NAME || 'azure-vm-project-v2' }}" \
            -var="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME || 'myResourceGroup' }}" \
            -var="vm_size=${{ secrets.VM_SIZE || 'Standard_B1s' }}" \
            -var="admin_username=${{ secrets.ADMIN_USERNAME || 'azureuser' }}" \
            -var="admin_ssh_public_key=${{ secrets.ADMIN_SSH_PUBLIC_KEY }}"
        working-directory: .//

      - name: Get Public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(terraform output -raw public_ip_address)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "Public IP: $PUBLIC_IP"
        working-directory: .//

      - name: Update Ansible Inventory
        run: |
          PUBLIC_IP=$(terraform output -raw public_ip_address)
          # Replace the entire line with the new IP
          sed -i "s/.*ansible_user=azureuser.*/$PUBLIC_IP ansible_user=azureuser ansible_ssh_private_key_file=~\/.ssh\/id_rsa/" ansible/inventory.ini
          echo "Updated inventory with IP: $PUBLIC_IP"
          cat ansible/inventory.ini
        working-directory: .//

      - name: Wait for VM to be ready
        run: |
          PUBLIC_IP=$(terraform output -raw public_ip_address)
          echo "Waiting for VM to be ready..."
          sleep 60
        working-directory: .//

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo apt-add-repository --yes --update ppa:ansible/ansible
          sudo apt-get install -y ansible

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ADMIN_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          PUBLIC_IP=$(terraform output -raw public_ip_address)
          ssh-keyscan -H $PUBLIC_IP >> ~/.ssh/known_hosts
          echo "SSH key setup complete"
          echo "SSH key permissions:"
          ls -la ~/.ssh/id_rsa
          echo "Testing SSH connection with verbose output..."
          ssh -v -o ConnectTimeout=30 -o StrictHostKeyChecking=no azureuser@$PUBLIC_IP "echo 'SSH connection successful'"
        working-directory: .//

      - name: Configure VM with Ansible
        run: |
          cd ansible
          ansible-playbook -i inventory.ini site.yml --ssh-common-args='-o StrictHostKeyChecking=no'
        working-directory: .//

      - name: Display Website URL
        run: |
          PUBLIC_IP=$(terraform output -raw public_ip_address)
          echo "üåê Website is now available at: http://$PUBLIC_IP"
          echo "üîó SSH connection: ssh ${{ secrets.ADMIN_USERNAME || 'azureuser' }}@$PUBLIC_IP"
        working-directory: .//
